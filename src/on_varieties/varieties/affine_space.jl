export AffineSpace


"""
    AffineSpace <: AbstractAlgebraicVariety

An [`AbstractAlgebraicVariety`](@ref) that represents an affine space ``\\mathbb{C}^n``.

# Constructors
```julia
AffineSpace(vars::AbstractVector{Variable})
AffineSpace(vars::AbstractArray)
```

# Examples
```jldoctest
julia> @var R[1:3,1:3] t[1:3]
(Variable[R‚ÇÅ‚Çã‚ÇÅ R‚ÇÅ‚Çã‚ÇÇ R‚ÇÅ‚Çã‚ÇÉ; R‚ÇÇ‚Çã‚ÇÅ R‚ÇÇ‚Çã‚ÇÇ R‚ÇÇ‚Çã‚ÇÉ; R‚ÇÉ‚Çã‚ÇÅ R‚ÇÉ‚Çã‚ÇÇ R‚ÇÉ‚Çã‚ÇÉ], Variable[t‚ÇÅ, t‚ÇÇ, t‚ÇÉ])

julia> AffineSpace(t)
AffineSpace of dimension 3
 variables: t‚ÇÅ, t‚ÇÇ, t‚ÇÉ

julia> AffineSpace(R)
AffineSpace of dimension 9
 variables: R‚ÇÅ‚Çã‚ÇÅ, R‚ÇÇ‚Çã‚ÇÅ, R‚ÇÉ‚Çã‚ÇÅ, R‚ÇÅ‚Çã‚ÇÇ, R‚ÇÇ‚Çã‚ÇÇ, R‚ÇÉ‚Çã‚ÇÇ, R‚ÇÅ‚Çã‚ÇÉ, R‚ÇÇ‚Çã‚ÇÉ, R‚ÇÉ‚Çã‚ÇÉ

julia> AffineSpace([R, t])
AffineSpace of dimension 12
 variables: R‚ÇÅ‚Çã‚ÇÅ, R‚ÇÇ‚Çã‚ÇÅ, R‚ÇÉ‚Çã‚ÇÅ, R‚ÇÅ‚Çã‚ÇÇ, R‚ÇÇ‚Çã‚ÇÇ, R‚ÇÉ‚Çã‚ÇÇ, R‚ÇÅ‚Çã‚ÇÉ, R‚ÇÇ‚Çã‚ÇÉ, R‚ÇÉ‚Çã‚ÇÉ, t‚ÇÅ, t‚ÇÇ, t‚ÇÉ
```
"""
struct AffineSpace <: AbstractAlgebraicVariety
    vars::Vector{Variable}
    samples::Dict{FixedFreeVariables, FixedFreeSamples}

    function AffineSpace(vars, samples)
        if isempty(vars)
            error("Vector of variables must be nonempty")
        end
        return new(vars, samples)
    end
end

AffineSpace(
    vars::AbstractArray
) = AffineSpace(Variable.(collect(flatten(vars))), Dict())

variables(ùî∏::AffineSpace) = ùî∏.vars
dimension(ùî∏::AffineSpace; kwargs...) = nvariables(ùî∏)

function Base.show(io::IO, ùî∏::AffineSpace)
    println(io, "AffineSpace of dimension $(dimension(ùî∏))")
    print(io, " variables: ", join(variables(ùî∏), ", "))
end

expressions(::AffineSpace) = [Expression(0)]
generate_sample(ùî∏::AffineSpace) = rand_unit(ComplexF64, nvariables(ùî∏))

tangent_space(
    ùî∏::AffineSpace,
    args...;
    kwargs...
) = rand_unit(ComplexF64, nvariables(ùî∏), nvariables(ùî∏))

finite_dominant_projection(ùî∏::AffineSpace; kwargs...) = ExpressionMap(ùî∏, variables(ùî∏))

sample(
    ùî∏::AffineSpace,
    vars::FixedFreeVariables;
    nsamples::Int=1,
    kwargs...
) = FixedFreeSamples(
        rand_unit(ComplexF64, nfixed(vars)),
        rand_unit(ComplexF64, nfree(vars), nsamples)
    )

function sample!(
    ùî∏::AffineSpace,
    vars::FixedFreeVariables;
    nsamples::Int=1,
    kwargs...
)
    s = sample(ùî∏, vars; nsamples=nsamples)
    ùî∏.samples[vars] = s
end

samples(
    ùî∏::AffineSpace,
    vars::FixedFreeVariables
) = get(ùî∏.samples, vars, nothing)
var documenterSearchIndex = {"docs":
[{"location":"on_varieties/interpolation/#Interpolation","page":"Interpolation","title":"Interpolation","text":"","category":"section"},{"location":"on_varieties/sampling/#Sampling","page":"Sampling","title":"Sampling","text":"","category":"section"},{"location":"on_varieties/sampling/","page":"Sampling","title":"Sampling","text":"In this Julia package we partially deal with polynomial and rational function defined on algebraic varieties. These varieties are defined by multivariate polynomial systems. We use HomotopyContinuation.jl to sample these algebraic varieties. The samples are later used for the interpolation. ","category":"page"},{"location":"on_varieties/sampling/","page":"Sampling","title":"Sampling","text":"An alternative would be that a user provides a method that will generate samples without using HomotopyContinuation. In practice it is usually possible to provide such a method, since we very often deal with structured polynomial systems.","category":"page"},{"location":"on_varieties/sampling/","page":"Sampling","title":"Sampling","text":"possible_to_sample\nsample\nsample!\nsamples","category":"page"},{"location":"on_varieties/sampling/#MultivariateInterpolation.possible_to_sample","page":"Sampling","title":"MultivariateInterpolation.possible_to_sample","text":"possible_to_sample(X::AbstractAlgebraicVariety, vars::FixedFreeVariables; kwargs...)\n\nReturns false if there exists a free variable in vars that is determined in  finite many ways by all fixed variables in vars.\n\nThrows a WARNING (for keyword argument logging=true) if there are  no constraints in free variables after fixing all the fixed ones.\n\nKeyword arguments:\n\n\ntols::Tolerances=Tolerances(): tolerances structure used for computations. Tolerances used \n\nin this method: same as in image_dimension.\n\nlogging::Bool=true\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/sampling/#MultivariateInterpolation.sample","page":"Sampling","title":"MultivariateInterpolation.sample","text":"sample(X::AbstractAlgebraicVariety, vars::FixedFreeVariables; <keyword arguments>) -> FixedFreeSamples\n\nReturns the samples of X in the given vars.  Results in an error, if it is impossible or unreasonable to sample the given vars from X.\n\nKeyword arguments\n\nnsamples::Integer=1: number of samples.\nstart_point::Union{AbstractVector, Nothing}=nothing: starting point for homotopy continuation.\ntols::Tolerances=Tolerances(): tolerances for numerical computations.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/sampling/#MultivariateInterpolation.sample!","page":"Sampling","title":"MultivariateInterpolation.sample!","text":"sample!(X::AbstractAlgebraicVariety, vars::FixedFreeSamples; <keyword arguments>)\n\nSamples X in the given vars and updates X with these samples.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/sampling/#MultivariateInterpolation.samples","page":"Sampling","title":"MultivariateInterpolation.samples","text":"samples(X::AbstractAlgebraicVariety, vars::FixedFreeVariables) -> FixedFreeSamples\n\nReturns the saved samples of X in the given vars.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/varieties/#Algebraic-varieties","page":"Algebraic varieties","title":"Algebraic varieties","text":"","category":"section"},{"location":"on_varieties/varieties/","page":"Algebraic varieties","title":"Algebraic varieties","text":"Abstract type for algebraic varieties is given by","category":"page"},{"location":"on_varieties/varieties/","page":"Algebraic varieties","title":"Algebraic varieties","text":"AbstractAlgebraicVariety","category":"page"},{"location":"on_varieties/varieties/#MultivariateInterpolation.AbstractAlgebraicVariety","page":"Algebraic varieties","title":"MultivariateInterpolation.AbstractAlgebraicVariety","text":"abstract type AbstractAlgebraicVariety end\n\n\n\n\n\n","category":"type"},{"location":"on_varieties/varieties/#AffineSpace","page":"Algebraic varieties","title":"AffineSpace","text":"","category":"section"},{"location":"on_varieties/varieties/","page":"Algebraic varieties","title":"Algebraic varieties","text":"AffineSpace","category":"page"},{"location":"on_varieties/varieties/#MultivariateInterpolation.AffineSpace","page":"Algebraic varieties","title":"MultivariateInterpolation.AffineSpace","text":"AffineSpace <: AbstractAlgebraicVariety\n\n\n\n\n\n","category":"type"},{"location":"on_varieties/varieties/#AlgebraicVariety","page":"Algebraic varieties","title":"AlgebraicVariety","text":"","category":"section"},{"location":"on_varieties/varieties/","page":"Algebraic varieties","title":"Algebraic varieties","text":"AlgebraicVariety","category":"page"},{"location":"on_varieties/varieties/#MultivariateInterpolation.AlgebraicVariety","page":"Algebraic varieties","title":"MultivariateInterpolation.AlgebraicVariety","text":"AlgebraicVariety <: AbstractAlgebraicVariety\n\n\n\n\n\n","category":"type"},{"location":"on_varieties/varieties/#MapGraph","page":"Algebraic varieties","title":"MapGraph","text":"","category":"section"},{"location":"on_varieties/varieties/","page":"Algebraic varieties","title":"Algebraic varieties","text":"MapGraph","category":"page"},{"location":"on_varieties/varieties/#MultivariateInterpolation.MapGraph","page":"Algebraic varieties","title":"MultivariateInterpolation.MapGraph","text":"MapGraph{T<:ExpressionMap} <: AbstractAlgebraicVariety\n\n\n\n\n\n","category":"type"},{"location":"on_varieties/varieties/#Methods","page":"Algebraic varieties","title":"Methods","text":"","category":"section"},{"location":"on_varieties/varieties/","page":"Algebraic varieties","title":"Algebraic varieties","text":"variables(::AbstractAlgebraicVariety)\nnvariables(::AbstractAlgebraicVariety)\nexpressions\nnexpressions\ngenerate_sample\njacobian\ntangent_space\ndimension\nfinite_dominant_projection","category":"page"},{"location":"on_varieties/varieties/#MultivariateInterpolation.variables-Tuple{AbstractAlgebraicVariety}","page":"Algebraic varieties","title":"MultivariateInterpolation.variables","text":"variables(X::AbstractAlgebraicVariety) -> Vector{Variable}\n\nReturns the variables of X.\n\n\n\n\n\n","category":"method"},{"location":"on_varieties/varieties/#MultivariateInterpolation.nvariables-Tuple{AbstractAlgebraicVariety}","page":"Algebraic varieties","title":"MultivariateInterpolation.nvariables","text":"nvariables(X::AbstractAlgebraicVariety) -> Int\n\nReturns the number of variables of X.\n\n\n\n\n\n","category":"method"},{"location":"on_varieties/varieties/#MultivariateInterpolation.expressions","page":"Algebraic varieties","title":"MultivariateInterpolation.expressions","text":"expressions(X::AbstractAlgebraicVariety) -> Vector{Expression}\n\nReturns the expressions of X.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/varieties/#MultivariateInterpolation.nexpressions","page":"Algebraic varieties","title":"MultivariateInterpolation.nexpressions","text":"nexpressions(X::AbstractAlgebraicVariety) -> Int\n\nReturns the number of expressions of X.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/varieties/#MultivariateInterpolation.generate_sample","page":"Algebraic varieties","title":"MultivariateInterpolation.generate_sample","text":"generate_sample(X::AbstractAlgebraicVariety) -> Vector{ComplexF64}\n\nGenerates a sample from X.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/varieties/#MultivariateInterpolation.jacobian","page":"Algebraic varieties","title":"MultivariateInterpolation.jacobian","text":"jacobian(X::AbstractAlgebraicVariety) -> Matrix{Expression}\n\nReturns the symbolic jacobian of X.\n\n\n\n\n\njacobian(X::AbstractAlgebraicVariety, x::AbstractVector{<:Number}) -> Matrix{<:Number}\n\nReturns the jacobian of X evaluated at x.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/varieties/#MultivariateInterpolation.tangent_space","page":"Algebraic varieties","title":"MultivariateInterpolation.tangent_space","text":"tangent_space(X::AbstractAlgebraicVariety, x::AbstractVector{<:Number}; <keyword arguments>) -> Matrix{<:Number}\n\nReturns the tangent space of X at x.\n\nKeyword arguments\n\ntols::Tolerances=Tolerances(): tolerances for numerical computations.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/varieties/#MultivariateInterpolation.dimension","page":"Algebraic varieties","title":"MultivariateInterpolation.dimension","text":"dimension(X::AbstractAlgebraicVariety; <keyword arguments>)\n\nComputes the dimension of X.\n\nKeyword arguments\n\nsample::Union{AbstractVector{<:Number}, Nothing}=nothing: point that belongs to X.\ntols::Tolerances=Tolerances(): tolerances for numerical computations.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/varieties/#MultivariateInterpolation.finite_dominant_projection","page":"Algebraic varieties","title":"MultivariateInterpolation.finite_dominant_projection","text":"finite_dominant_projection(X::AbstractAlgebraicVariety; <keyword arguments>) -> ExpressionMap\n\nReturns a finite dominant projection from X to an affine space.\n\nKeyword arguments\n\nsample::Union{AbstractVector, Nothing}=nothing: point that belongs to X.\ntols::Tolerances=Tolerances(): tolerances for numerical computations.\n\n\n\n\n\n","category":"function"},{"location":"fixed_free/#Fixed-free-interpolation","page":"Fixed-free interpolation","title":"Fixed-free interpolation","text":"","category":"section"},{"location":"fixed_free/#FixedFreeVariables","page":"Fixed-free interpolation","title":"FixedFreeVariables","text":"","category":"section"},{"location":"fixed_free/","page":"Fixed-free interpolation","title":"Fixed-free interpolation","text":"FixedFreeVariables\nfixed(::FixedFreeVariables)\nfree(::FixedFreeVariables)\nnfixed(::FixedFreeVariables)\nnfree(::FixedFreeVariables)\nvariables(::FixedFreeVariables)\nnvariables(::FixedFreeVariables)","category":"page"},{"location":"fixed_free/#MultivariateInterpolation.FixedFreeVariables","page":"Fixed-free interpolation","title":"MultivariateInterpolation.FixedFreeVariables","text":"FixedFreeVariables\n\nData type for creating fixed and free variables used for interpolation.\n\nFixedFreeVariables(fixed::Vector{Variable}, free::Vector{Variable})\nFixedFreeVariables(\n    fixed::Union{Variable, AbstractArray},\n    free::Union{Variable, AbstractArray}\n)\nFixedFreeVariables(free::Union{Variable, AbstractArray})\n\nExamples\n\njulia> @var x y[1:2] z[1:2,1:3]\n(x, Variable[y₁, y₂], Variable[z₁₋₁ z₁₋₂ z₁₋₃; z₂₋₁ z₂₋₂ z₂₋₃])\n\njulia> FixedFreeVariables(x)\nFixedFreeVariables: 0 fixed, 1 free\n fixed: \n free: x\n\njulia> FixedFreeVariables([x, y])\nFixedFreeVariables: 0 fixed, 3 free\n fixed: \n free: x, y₁, y₂\n\njulia> FixedFreeVariables([x, y], z)\nFixedFreeVariables: 3 fixed, 6 free\n fixed: x, y₁, y₂\n free: z₁₋₁, z₂₋₁, z₁₋₂, z₂₋₂, z₁₋₃, z₂₋₃\n\njulia> FixedFreeVariables([x, y], [y, z])\nERROR: Nontrivial intersection of fixed and free variables\n[...]\n\njulia> FixedFreeVariables([x, y, z], [])\nERROR: Array of free variables must be nonempty\n[...]\n\n\n\n\n\n","category":"type"},{"location":"fixed_free/#MultivariateInterpolation.fixed-Tuple{FixedFreeVariables}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.fixed","text":"fixed(vars::FixedFreeVariables) -> Vector{Variable}\n\nReturn the fixed variables in vars.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#MultivariateInterpolation.free-Tuple{FixedFreeVariables}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.free","text":"free(vars::FixedFreeVariables) -> Vector{Variable}\n\nReturn the free variables in vars.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#MultivariateInterpolation.nfixed-Tuple{FixedFreeVariables}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.nfixed","text":"nfixed(vars::FixedFreeVariables) -> Int\n\nReturn the number of fixed variables in vars.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#MultivariateInterpolation.nfree-Tuple{FixedFreeVariables}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.nfree","text":"nfree(vars::FixedFreeVariables) -> Int\n\nReturn the number of free variables in vars.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#MultivariateInterpolation.variables-Tuple{FixedFreeVariables}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.variables","text":"variables(vars::FixedFreeVariables) -> Vector{Variable}\n\nReturn all the variables in vars.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#MultivariateInterpolation.nvariables-Tuple{FixedFreeVariables}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.nvariables","text":"nvariables(vars::FixedFreeVariables) -> Int\n\nReturn the number of all the variables in vars.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#FixedFreeSamples","page":"Fixed-free interpolation","title":"FixedFreeSamples","text":"","category":"section"},{"location":"fixed_free/","page":"Fixed-free interpolation","title":"Fixed-free interpolation","text":"FixedFreeSamples\nfixed(::FixedFreeSamples)\nfree(::FixedFreeSamples)\nnsamples(::FixedFreeSamples)","category":"page"},{"location":"fixed_free/#MultivariateInterpolation.FixedFreeSamples","page":"Fixed-free interpolation","title":"MultivariateInterpolation.FixedFreeSamples","text":"FixedFreeSamples\n\nData type contains samples from a variety of some FixedFreeVariables.\n\nFixedFreeSamples(fixed::Vector{ComplexF64}, free::Matrix{ComplexF64})\n\nExamples\n\n\n\n\n\n","category":"type"},{"location":"fixed_free/#MultivariateInterpolation.fixed-Tuple{FixedFreeSamples}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.fixed","text":"fixed(s::FixedFreeSamples) -> Vector{ComplexF64}\n\nReturn the fixed samples in s.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#MultivariateInterpolation.free-Tuple{FixedFreeSamples}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.free","text":"free(s::FixedFreeSamples) -> Matrix{ComplexF64}\n\nReturn the free samples in s.\n\n\n\n\n\n","category":"method"},{"location":"fixed_free/#MultivariateInterpolation.nsamples-Tuple{FixedFreeSamples}","page":"Fixed-free interpolation","title":"MultivariateInterpolation.nsamples","text":"nsamples(s::FixedFreeSamples) -> Int\n\nReturn the number of samples in s.\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"MultivariateInterpolation.jl is a Julia package that provides methods for interpolating sparse and dense multivariate polynomial and rational functions from samples taken either from an algebraic variety or an affine space.","category":"page"},{"location":"#Quick-start","page":"Introduction","title":"Quick start","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using MultivariateInterpolation\n@var R[1:3,1:3] t[1:3] E[1:3,1:3]\neqs = vcat((R'*R-I)[:], det(R)-1) # rotation constraints\nX = AlgebraicVariety(eqs; variables=vcat(R[:], t))\ntₓ = [0 -t[3] t[2]; t[3] 0 -t[1]; -t[2] t[1] 0] # skew-symmetric matrix\nφ = ExpressionMap(X, E, tₓ*R) # map to essential matrices\nimage_dimension(φ)\nΓ = MapGraph(φ)","category":"page"},{"location":"#Contents","page":"Introduction","title":"Contents","text":"","category":"section"},{"location":"inter_basis/#Interpolation-basis","page":"Interpolation basis","title":"Interpolation basis","text":"","category":"section"},{"location":"inter_basis/","page":"Interpolation basis","title":"Interpolation basis","text":"Abstract type for interpolation basis is given by","category":"page"},{"location":"inter_basis/","page":"Interpolation basis","title":"Interpolation basis","text":"AbstractInterpolationBasis","category":"page"},{"location":"inter_basis/#MultivariateInterpolation.AbstractInterpolationBasis","page":"Interpolation basis","title":"MultivariateInterpolation.AbstractInterpolationBasis","text":"abstract type AbstractInterpolationBasis end\n\n\n\n\n\n","category":"type"},{"location":"inter_basis/#Interface","page":"Interpolation basis","title":"Interface","text":"","category":"section"},{"location":"inter_basis/","page":"Interpolation basis","title":"Interpolation basis","text":"In order to achieve the functionalities of this package that work on general AbstractInterpolationBasis, one should implement the following interface:","category":"page"},{"location":"inter_basis/","page":"Interpolation basis","title":"Interpolation basis","text":"nelements\nto_expressions\nevaluate","category":"page"},{"location":"inter_basis/#MultivariateInterpolation.nelements","page":"Interpolation basis","title":"MultivariateInterpolation.nelements","text":"nelements(B::AbstractInterpolationBasis) -> Integer\n\nReturn the number of elements in B.\n\n\n\n\n\n","category":"function"},{"location":"inter_basis/#MultivariateInterpolation.to_expressions","page":"Interpolation basis","title":"MultivariateInterpolation.to_expressions","text":"to_expressions(B::AbstractInterpolationBasis) -> AbstractVector{Expression}\n\nReturn the elements of B converted to Expressions.\n\n\n\n\n\n","category":"function"},{"location":"inter_basis/#HomotopyContinuation.ModelKit.evaluate","page":"Interpolation basis","title":"HomotopyContinuation.ModelKit.evaluate","text":"HC.evaluate(B::AbstractInterpolationBasis, samples::AbstractMatrix{<:Number})\n\nTBW\n\n\n\n\n\n","category":"function"},{"location":"inter_basis/#MonomialBasis","page":"Interpolation basis","title":"MonomialBasis","text":"","category":"section"},{"location":"inter_basis/","page":"Interpolation basis","title":"Interpolation basis","text":"MonomialBasis","category":"page"},{"location":"inter_basis/#MultivariateInterpolation.MonomialBasis","page":"Interpolation basis","title":"MultivariateInterpolation.MonomialBasis","text":"struct MonomialBasis{Tv<:Integer,Ti<:Integer} <: AbstractInterpolationBasis\n    mexps::Vector{SparseVector{Tv,Ti}}\n    vars::Vector{Variable}\nend\n\nAn AbstractInterpolationBasis that consists of monomials. Parametric type Tv defines the type of exponents in multiexponents, Ti defines the type of non-zero exponent indicies. See also SparseVector.\n\nMonomialBasis{Tv<:Integer, Ti<:Integer}(; variables::Vector{Variable}, degree::Integer)\nmonomials(variables::Vector{Variable}, degree::Integer)\n\nExamples\n\njulia> @var x y z\n(x, y, z)\n\njulia> mons = MonomialBasis{Int8, Int16}(variables=[x,y,z], degree=2)\n10-element MonomialBasis{Int8, Int16}\n[1, x, y, z, x^2, y^2, z^2, x*y, x*z, y*z]\n\njulia> samples = randn(ComplexF64, 3, 2)\n3×2 Matrix{ComplexF64}:\n  0.299344-0.238374im  -0.527805-0.360128im\n -0.114638+1.89994im    0.127791-0.846475im\n  0.303708+1.24025im   0.0363844-0.264417im\n\njulia> evaluate(mons, samples)\n10×2 Matrix{ComplexF64}:\n       1.0+0.0im              1.0+0.0im\n  0.299344-0.238374im   -0.527805-0.360128im\n -0.114638+1.89994im     0.127791-0.846475im\n  0.303708+1.24025im    0.0363844-0.264417im\n 0.0327848-0.142712im    0.148886+0.380155im\n  -3.59664-0.43561im    -0.700189-0.216343im\n  -1.44598+0.753349im  -0.0685926-0.0192413im\n  0.418581+0.596063im   -0.372288+0.400752im\n  0.386557+0.298866im   -0.114428+0.126458im\n  -2.39122+0.434849im   -0.219173-0.0645886im\n\n\n\n\n\n","category":"type"},{"location":"on_varieties/maps/#ExpressionMap","page":"ExpressionMap","title":"ExpressionMap","text":"","category":"section"},{"location":"on_varieties/maps/","page":"ExpressionMap","title":"ExpressionMap","text":"ExpressionMap\ndomain_dimension\nimage_dimension\nis_dominant","category":"page"},{"location":"on_varieties/maps/#MultivariateInterpolation.ExpressionMap","page":"ExpressionMap","title":"MultivariateInterpolation.ExpressionMap","text":"ExpressionMap{T <: AbstractAlgebraicVariety}\n\n\n\n\n\n","category":"type"},{"location":"on_varieties/maps/#MultivariateInterpolation.domain_dimension","page":"ExpressionMap","title":"MultivariateInterpolation.domain_dimension","text":"domain_dimension(φ::ExpressionMap; kwargs...)\n\nComputes the dimension of the domain of varphi.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/maps/#MultivariateInterpolation.image_dimension","page":"ExpressionMap","title":"MultivariateInterpolation.image_dimension","text":"image_dimension(φ::ExpressionMap; kwargs...)\n\nComputes the dimension of the image of varphi.\n\n\n\n\n\n","category":"function"},{"location":"on_varieties/maps/#MultivariateInterpolation.is_dominant","page":"ExpressionMap","title":"MultivariateInterpolation.is_dominant","text":"is_dominant(φ::ExpressionMap; kwargs...)\n\nReturns true if varphi colon X dashrightarrow mathbbC^m is dominant, i.e. if\n\nmathrmdim(mathrmim(varphi)) = m\n\n\n\n\n\n","category":"function"}]
}
